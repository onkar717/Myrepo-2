{"id":"node_modules/postcss/lib/rule.js","dependencies":[{"name":"/home/omkar/Desktop/Material/Crud_Reactjs/package.json","includedInParent":true,"mtime":1699760094075},{"name":"/home/omkar/Desktop/Material/Crud_Reactjs/.babelrc","includedInParent":true,"mtime":1699718964356},{"name":"/home/omkar/Desktop/Material/Crud_Reactjs/node_modules/postcss/package.json","includedInParent":true,"mtime":1699760093415},{"name":"./container","loc":{"line":6,"column":48,"index":117},"parent":"/home/omkar/Desktop/Material/Crud_Reactjs/node_modules/postcss/lib/rule.js","resolved":"/home/omkar/Desktop/Material/Crud_Reactjs/node_modules/postcss/lib/container.js"},{"name":"./list","loc":{"line":8,"column":43,"index":178},"parent":"/home/omkar/Desktop/Material/Crud_Reactjs/node_modules/postcss/lib/rule.js","resolved":"/home/omkar/Desktop/Material/Crud_Reactjs/node_modules/postcss/lib/list.js"}],"generated":{"js":"\"use strict\";\n\nexports.__esModule = true;\nexports.default = void 0;\nvar _container = _interopRequireDefault(require(\"./container\"));\nvar _list = _interopRequireDefault(require(\"./list\"));\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\n/**\n * Represents a CSS rule: a selector followed by a declaration block.\n *\n * @extends Container\n *\n * @example\n * const root = postcss.parse('a{}')\n * const rule = root.first\n * rule.type       //=> 'rule'\n * rule.toString() //=> 'a{}'\n */\nvar Rule = /*#__PURE__*/function (_Container) {\n  _inheritsLoose(Rule, _Container);\n  function Rule(defaults) {\n    var _this;\n    _this = _Container.call(this, defaults) || this;\n    _this.type = 'rule';\n    if (!_this.nodes) _this.nodes = [];\n    return _this;\n  }\n  /**\n   * An array containing the rule’s individual selectors.\n   * Groups of selectors are split at commas.\n   *\n   * @type {string[]}\n   *\n   * @example\n   * const root = postcss.parse('a, b { }')\n   * const rule = root.first\n   *\n   * rule.selector  //=> 'a, b'\n   * rule.selectors //=> ['a', 'b']\n   *\n   * rule.selectors = ['a', 'strong']\n   * rule.selector //=> 'a, strong'\n   */\n\n  _createClass(Rule, [{\n    key: \"selectors\",\n    get: function get() {\n      return _list.default.comma(this.selector);\n    },\n    set: function set(values) {\n      var match = this.selector ? this.selector.match(/,\\s*/) : null;\n      var sep = match ? match[0] : ',' + this.raw('between', 'beforeOpen');\n      this.selector = values.join(sep);\n    }\n    /**\n     * @memberof Rule#\n     * @member {string} selector The rule’s full selector represented\n     *                           as a string.\n     *\n     * @example\n     * const root = postcss.parse('a, b { }')\n     * const rule = root.first\n     * rule.selector //=> 'a, b'\n     */\n\n    /**\n     * @memberof Rule#\n     * @member {object} raws Information to generate byte-to-byte equal\n     *                       node string as it was in the origin input.\n     *\n     * Every parser saves its own properties,\n     * but the default CSS parser uses:\n     *\n     * * `before`: the space symbols before the node. It also stores `*`\n     *   and `_` symbols before the declaration (IE hack).\n     * * `after`: the space symbols after the last child of the node\n     *   to the end of the node.\n     * * `between`: the symbols between the property and value\n     *   for declarations, selector and `{` for rules, or last parameter\n     *   and `{` for at-rules.\n     * * `semicolon`: contains `true` if the last child has\n     *   an (optional) semicolon.\n     * * `ownSemicolon`: contains `true` if there is semicolon after rule.\n     *\n     * PostCSS cleans selectors from comments and extra spaces,\n     * but it stores origin content in raws properties.\n     * As such, if you don’t change a declaration’s value,\n     * PostCSS will use the raw value with comments.\n     *\n     * @example\n     * const root = postcss.parse('a {\\n  color:black\\n}')\n     * root.first.first.raws //=> { before: '', between: ' ', after: '\\n' }\n     */\n  }]);\n\n  return Rule;\n}(_container.default);\nvar _default = Rule;\nexports.default = _default;\nmodule.exports = exports.default;"},"sourceMaps":{"js":{"mappings":[{"source":"rule.es6","name":null,"original":{"line":1,"column":0},"generated":{"line":5,"column":0}},{"source":"rule.es6","name":null,"original":{"line":1,"column":0},"generated":{"line":5,"column":4}},{"source":"rule.es6","name":null,"original":{"line":1,"column":0},"generated":{"line":5,"column":14}},{"source":"rule.es6","name":null,"original":{"line":1,"column":0},"generated":{"line":5,"column":17}},{"source":"rule.es6","name":null,"original":{"line":1,"column":0},"generated":{"line":5,"column":39}},{"source":"rule.es6","name":null,"original":{"line":1,"column":0},"generated":{"line":5,"column":40}},{"source":"rule.es6","name":null,"original":{"line":1,"column":0},"generated":{"line":5,"column":47}},{"source":"rule.es6","name":null,"original":{"line":1,"column":0},"generated":{"line":5,"column":48}},{"source":"rule.es6","name":null,"original":{"line":1,"column":0},"generated":{"line":5,"column":61}},{"source":"rule.es6","name":null,"original":{"line":1,"column":0},"generated":{"line":5,"column":62}},{"source":"rule.es6","name":null,"original":{"line":1,"column":0},"generated":{"line":5,"column":63}},{"source":"rule.es6","name":null,"original":{"line":2,"column":0},"generated":{"line":6,"column":0}},{"source":"rule.es6","name":null,"original":{"line":2,"column":0},"generated":{"line":6,"column":4}},{"source":"rule.es6","name":null,"original":{"line":2,"column":0},"generated":{"line":6,"column":9}},{"source":"rule.es6","name":null,"original":{"line":2,"column":0},"generated":{"line":6,"column":12}},{"source":"rule.es6","name":null,"original":{"line":2,"column":0},"generated":{"line":6,"column":34}},{"source":"rule.es6","name":null,"original":{"line":2,"column":0},"generated":{"line":6,"column":35}},{"source":"rule.es6","name":null,"original":{"line":2,"column":0},"generated":{"line":6,"column":42}},{"source":"rule.es6","name":null,"original":{"line":2,"column":0},"generated":{"line":6,"column":43}},{"source":"rule.es6","name":null,"original":{"line":2,"column":0},"generated":{"line":6,"column":51}},{"source":"rule.es6","name":null,"original":{"line":2,"column":0},"generated":{"line":6,"column":52}},{"source":"rule.es6","name":null,"original":{"line":2,"column":0},"generated":{"line":6,"column":53}},{"source":"rule.es6","name":null,"original":{"line":4,"column":0},"generated":{"line":32,"column":0}},{"source":"rule.es6","name":"Rule","original":{"line":15,"column":6},"generated":{"line":43,"column":4}},{"source":"rule.es6","name":null,"original":{"line":16,"column":2},"generated":{"line":45,"column":2}},{"source":"rule.es6","name":null,"original":{"line":16,"column":2},"generated":{"line":45,"column":11}},{"source":"rule.es6","name":null,"original":{"line":16,"column":2},"generated":{"line":45,"column":15}},{"source":"rule.es6","name":"defaults","original":{"line":16,"column":15},"generated":{"line":45,"column":16}},{"source":"rule.es6","name":null,"original":{"line":16,"column":2},"generated":{"line":45,"column":24}},{"source":"rule.es6","name":null,"original":{"line":16,"column":25},"generated":{"line":45,"column":26}},{"source":"rule.es6","name":null,"original":{"line":16,"column":25},"generated":{"line":46,"column":4}},{"source":"rule.es6","name":null,"original":{"line":16,"column":25},"generated":{"line":46,"column":8}},{"source":"rule.es6","name":null,"original":{"line":16,"column":25},"generated":{"line":46,"column":13}},{"source":"rule.es6","name":null,"original":{"line":17,"column":4},"generated":{"line":47,"column":4}},{"source":"rule.es6","name":null,"original":{"line":17,"column":4},"generated":{"line":47,"column":9}},{"source":"rule.es6","name":null,"original":{"line":17,"column":4},"generated":{"line":47,"column":12}},{"source":"rule.es6","name":null,"original":{"line":17,"column":4},"generated":{"line":47,"column":22}},{"source":"rule.es6","name":null,"original":{"line":17,"column":4},"generated":{"line":47,"column":23}},{"source":"rule.es6","name":null,"original":{"line":17,"column":4},"generated":{"line":47,"column":27}},{"source":"rule.es6","name":null,"original":{"line":17,"column":4},"generated":{"line":47,"column":28}},{"source":"rule.es6","name":null,"original":{"line":17,"column":4},"generated":{"line":47,"column":32}},{"source":"rule.es6","name":"defaults","original":{"line":17,"column":10},"generated":{"line":47,"column":34}},{"source":"rule.es6","name":null,"original":{"line":17,"column":4},"generated":{"line":47,"column":42}},{"source":"rule.es6","name":null,"original":{"line":17,"column":4},"generated":{"line":47,"column":43}},{"source":"rule.es6","name":null,"original":{"line":17,"column":4},"generated":{"line":47,"column":47}},{"source":"rule.es6","name":null,"original":{"line":17,"column":4},"generated":{"line":47,"column":51}},{"source":"rule.es6","name":null,"original":{"line":18,"column":4},"generated":{"line":48,"column":4}},{"source":"rule.es6","name":null,"original":{"line":18,"column":4},"generated":{"line":48,"column":9}},{"source":"rule.es6","name":"type","original":{"line":18,"column":9},"generated":{"line":48,"column":10}},{"source":"rule.es6","name":null,"original":{"line":18,"column":4},"generated":{"line":48,"column":14}},{"source":"rule.es6","name":null,"original":{"line":18,"column":16},"generated":{"line":48,"column":17}},{"source":"rule.es6","name":null,"original":{"line":18,"column":4},"generated":{"line":48,"column":23}},{"source":"rule.es6","name":null,"original":{"line":19,"column":4},"generated":{"line":49,"column":4}},{"source":"rule.es6","name":null,"original":{"line":19,"column":8},"generated":{"line":49,"column":8}},{"source":"rule.es6","name":null,"original":{"line":19,"column":9},"generated":{"line":49,"column":9}},{"source":"rule.es6","name":null,"original":{"line":19,"column":9},"generated":{"line":49,"column":14}},{"source":"rule.es6","name":"nodes","original":{"line":19,"column":14},"generated":{"line":49,"column":15}},{"source":"rule.es6","name":null,"original":{"line":19,"column":4},"generated":{"line":49,"column":20}},{"source":"rule.es6","name":null,"original":{"line":19,"column":21},"generated":{"line":49,"column":22}},{"source":"rule.es6","name":null,"original":{"line":19,"column":21},"generated":{"line":49,"column":27}},{"source":"rule.es6","name":"nodes","original":{"line":19,"column":26},"generated":{"line":49,"column":28}},{"source":"rule.es6","name":null,"original":{"line":19,"column":21},"generated":{"line":49,"column":33}},{"source":"rule.es6","name":null,"original":{"line":19,"column":34},"generated":{"line":49,"column":36}},{"source":"rule.es6","name":null,"original":{"line":19,"column":21},"generated":{"line":49,"column":38}},{"source":"rule.es6","name":null,"original":{"line":16,"column":25},"generated":{"line":50,"column":4}},{"source":"rule.es6","name":null,"original":{"line":16,"column":25},"generated":{"line":50,"column":11}},{"source":"rule.es6","name":null,"original":{"line":16,"column":25},"generated":{"line":50,"column":16}},{"source":"rule.es6","name":null,"original":{"line":20,"column":3},"generated":{"line":51,"column":2}},{"source":"rule.es6","name":null,"original":{"line":22,"column":2},"generated":{"line":52,"column":2}},{"source":"rule.es6","name":null,"original":{"line":38,"column":19},"generated":{"line":71,"column":24}},{"source":"rule.es6","name":null,"original":{"line":39,"column":4},"generated":{"line":72,"column":6}},{"source":"rule.es6","name":"list","original":{"line":39,"column":11},"generated":{"line":72,"column":13}},{"source":"rule.es6","name":"list","original":{"line":39,"column":11},"generated":{"line":72,"column":18}},{"source":"rule.es6","name":"list","original":{"line":39,"column":11},"generated":{"line":72,"column":19}},{"source":"rule.es6","name":"list","original":{"line":39,"column":11},"generated":{"line":72,"column":26}},{"source":"rule.es6","name":"comma","original":{"line":39,"column":16},"generated":{"line":72,"column":27}},{"source":"rule.es6","name":null,"original":{"line":39,"column":11},"generated":{"line":72,"column":32}},{"source":"rule.es6","name":null,"original":{"line":39,"column":22},"generated":{"line":72,"column":33}},{"source":"rule.es6","name":null,"original":{"line":39,"column":22},"generated":{"line":72,"column":37}},{"source":"rule.es6","name":"selector","original":{"line":39,"column":27},"generated":{"line":72,"column":38}},{"source":"rule.es6","name":null,"original":{"line":39,"column":11},"generated":{"line":72,"column":46}},{"source":"rule.es6","name":null,"original":{"line":39,"column":4},"generated":{"line":72,"column":47}},{"source":"rule.es6","name":null,"original":{"line":40,"column":3},"generated":{"line":73,"column":4}},{"source":"rule.es6","name":"values","original":{"line":42,"column":17},"generated":{"line":74,"column":22}},{"source":"rule.es6","name":null,"original":{"line":42,"column":25},"generated":{"line":74,"column":30}},{"source":"rule.es6","name":null,"original":{"line":43,"column":4},"generated":{"line":75,"column":6}},{"source":"rule.es6","name":"match","original":{"line":43,"column":8},"generated":{"line":75,"column":10}},{"source":"rule.es6","name":null,"original":{"line":43,"column":13},"generated":{"line":75,"column":15}},{"source":"rule.es6","name":null,"original":{"line":43,"column":16},"generated":{"line":75,"column":18}},{"source":"rule.es6","name":null,"original":{"line":43,"column":16},"generated":{"line":75,"column":22}},{"source":"rule.es6","name":"selector","original":{"line":43,"column":21},"generated":{"line":75,"column":23}},{"source":"rule.es6","name":null,"original":{"line":43,"column":16},"generated":{"line":75,"column":31}},{"source":"rule.es6","name":null,"original":{"line":43,"column":32},"generated":{"line":75,"column":34}},{"source":"rule.es6","name":null,"original":{"line":43,"column":32},"generated":{"line":75,"column":38}},{"source":"rule.es6","name":"selector","original":{"line":43,"column":37},"generated":{"line":75,"column":39}},{"source":"rule.es6","name":null,"original":{"line":43,"column":32},"generated":{"line":75,"column":47}},{"source":"rule.es6","name":"match","original":{"line":43,"column":46},"generated":{"line":75,"column":48}},{"source":"rule.es6","name":null,"original":{"line":43,"column":32},"generated":{"line":75,"column":53}},{"source":"rule.es6","name":null,"original":{"line":43,"column":52},"generated":{"line":75,"column":54}},{"source":"rule.es6","name":null,"original":{"line":43,"column":32},"generated":{"line":75,"column":60}},{"source":"rule.es6","name":null,"original":{"line":43,"column":16},"generated":{"line":75,"column":61}},{"source":"rule.es6","name":null,"original":{"line":43,"column":62},"generated":{"line":75,"column":64}},{"source":"rule.es6","name":null,"original":{"line":43,"column":4},"generated":{"line":75,"column":68}},{"source":"rule.es6","name":null,"original":{"line":44,"column":4},"generated":{"line":76,"column":6}},{"source":"rule.es6","name":"sep","original":{"line":44,"column":8},"generated":{"line":76,"column":10}},{"source":"rule.es6","name":null,"original":{"line":44,"column":11},"generated":{"line":76,"column":13}},{"source":"rule.es6","name":"match","original":{"line":44,"column":14},"generated":{"line":76,"column":16}},{"source":"rule.es6","name":null,"original":{"line":44,"column":19},"generated":{"line":76,"column":21}},{"source":"rule.es6","name":"match","original":{"line":44,"column":22},"generated":{"line":76,"column":24}},{"source":"rule.es6","name":null,"original":{"line":44,"column":27},"generated":{"line":76,"column":29}},{"source":"rule.es6","name":null,"original":{"line":44,"column":28},"generated":{"line":76,"column":30}},{"source":"rule.es6","name":null,"original":{"line":44,"column":27},"generated":{"line":76,"column":31}},{"source":"rule.es6","name":null,"original":{"line":44,"column":19},"generated":{"line":76,"column":32}},{"source":"rule.es6","name":null,"original":{"line":44,"column":33},"generated":{"line":76,"column":35}},{"source":"rule.es6","name":null,"original":{"line":44,"column":33},"generated":{"line":76,"column":38}},{"source":"rule.es6","name":null,"original":{"line":44,"column":39},"generated":{"line":76,"column":41}},{"source":"rule.es6","name":null,"original":{"line":44,"column":39},"generated":{"line":76,"column":45}},{"source":"rule.es6","name":"raw","original":{"line":44,"column":44},"generated":{"line":76,"column":46}},{"source":"rule.es6","name":null,"original":{"line":44,"column":39},"generated":{"line":76,"column":49}},{"source":"rule.es6","name":null,"original":{"line":44,"column":48},"generated":{"line":76,"column":50}},{"source":"rule.es6","name":null,"original":{"line":44,"column":39},"generated":{"line":76,"column":59}},{"source":"rule.es6","name":null,"original":{"line":44,"column":59},"generated":{"line":76,"column":61}},{"source":"rule.es6","name":null,"original":{"line":44,"column":39},"generated":{"line":76,"column":73}},{"source":"rule.es6","name":null,"original":{"line":44,"column":4},"generated":{"line":76,"column":74}},{"source":"rule.es6","name":null,"original":{"line":45,"column":4},"generated":{"line":77,"column":6}},{"source":"rule.es6","name":null,"original":{"line":45,"column":4},"generated":{"line":77,"column":10}},{"source":"rule.es6","name":"selector","original":{"line":45,"column":9},"generated":{"line":77,"column":11}},{"source":"rule.es6","name":null,"original":{"line":45,"column":4},"generated":{"line":77,"column":19}},{"source":"rule.es6","name":"values","original":{"line":45,"column":20},"generated":{"line":77,"column":22}},{"source":"rule.es6","name":null,"original":{"line":45,"column":26},"generated":{"line":77,"column":28}},{"source":"rule.es6","name":"join","original":{"line":45,"column":27},"generated":{"line":77,"column":29}},{"source":"rule.es6","name":null,"original":{"line":45,"column":20},"generated":{"line":77,"column":33}},{"source":"rule.es6","name":"sep","original":{"line":45,"column":32},"generated":{"line":77,"column":34}},{"source":"rule.es6","name":null,"original":{"line":45,"column":20},"generated":{"line":77,"column":37}},{"source":"rule.es6","name":null,"original":{"line":45,"column":4},"generated":{"line":77,"column":38}},{"source":"rule.es6","name":null,"original":{"line":46,"column":3},"generated":{"line":78,"column":4}},{"source":"rule.es6","name":null,"original":{"line":48,"column":2},"generated":{"line":79,"column":4}},{"source":"rule.es6","name":null,"original":{"line":59,"column":2},"generated":{"line":90,"column":4}},{"source":"rule.es6","name":"Container","original":{"line":15,"column":19},"generated":{"line":121,"column":2}},{"source":"rule.es6","name":"Container","original":{"line":15,"column":19},"generated":{"line":121,"column":12}},{"source":"rule.es6","name":"Container","original":{"line":15,"column":19},"generated":{"line":121,"column":13}},{"source":"rule.es6","name":"Rule","original":{"line":89,"column":15},"generated":{"line":122,"column":15}}],"sources":{"rule.es6":"import Container from './container'\nimport list from './list'\n\n/**\n * Represents a CSS rule: a selector followed by a declaration block.\n *\n * @extends Container\n *\n * @example\n * const root = postcss.parse('a{}')\n * const rule = root.first\n * rule.type       //=> 'rule'\n * rule.toString() //=> 'a{}'\n */\nclass Rule extends Container {\n  constructor (defaults) {\n    super(defaults)\n    this.type = 'rule'\n    if (!this.nodes) this.nodes = []\n  }\n\n  /**\n   * An array containing the rule’s individual selectors.\n   * Groups of selectors are split at commas.\n   *\n   * @type {string[]}\n   *\n   * @example\n   * const root = postcss.parse('a, b { }')\n   * const rule = root.first\n   *\n   * rule.selector  //=> 'a, b'\n   * rule.selectors //=> ['a', 'b']\n   *\n   * rule.selectors = ['a', 'strong']\n   * rule.selector //=> 'a, strong'\n   */\n  get selectors () {\n    return list.comma(this.selector)\n  }\n\n  set selectors (values) {\n    let match = this.selector ? this.selector.match(/,\\s*/) : null\n    let sep = match ? match[0] : ',' + this.raw('between', 'beforeOpen')\n    this.selector = values.join(sep)\n  }\n\n  /**\n   * @memberof Rule#\n   * @member {string} selector The rule’s full selector represented\n   *                           as a string.\n   *\n   * @example\n   * const root = postcss.parse('a, b { }')\n   * const rule = root.first\n   * rule.selector //=> 'a, b'\n   */\n\n  /**\n   * @memberof Rule#\n   * @member {object} raws Information to generate byte-to-byte equal\n   *                       node string as it was in the origin input.\n   *\n   * Every parser saves its own properties,\n   * but the default CSS parser uses:\n   *\n   * * `before`: the space symbols before the node. It also stores `*`\n   *   and `_` symbols before the declaration (IE hack).\n   * * `after`: the space symbols after the last child of the node\n   *   to the end of the node.\n   * * `between`: the symbols between the property and value\n   *   for declarations, selector and `{` for rules, or last parameter\n   *   and `{` for at-rules.\n   * * `semicolon`: contains `true` if the last child has\n   *   an (optional) semicolon.\n   * * `ownSemicolon`: contains `true` if there is semicolon after rule.\n   *\n   * PostCSS cleans selectors from comments and extra spaces,\n   * but it stores origin content in raws properties.\n   * As such, if you don’t change a declaration’s value,\n   * PostCSS will use the raw value with comments.\n   *\n   * @example\n   * const root = postcss.parse('a {\\n  color:black\\n}')\n   * root.first.first.raws //=> { before: '', between: ' ', after: '\\n' }\n   */\n}\n\nexport default Rule\n"},"lineCount":null}},"error":null,"hash":"b809ed5c43231a3e15aa534b4cc102ea","cacheData":{"env":{}}}