{"id":"node_modules/autoprefixer/lib/utils.js","dependencies":[{"name":"/home/omkar/Desktop/Material/Crud_Reactjs/package.json","includedInParent":true,"mtime":1699760094075},{"name":"/home/omkar/Desktop/Material/Crud_Reactjs/.babelrc","includedInParent":true,"mtime":1699718964356},{"name":"/home/omkar/Desktop/Material/Crud_Reactjs/node_modules/autoprefixer/package.json","includedInParent":true,"mtime":1699760093511},{"name":"postcss","loc":{"line":9,"column":19,"index":1243},"parent":"/home/omkar/Desktop/Material/Crud_Reactjs/node_modules/autoprefixer/lib/utils.js","resolved":"/home/omkar/Desktop/Material/Crud_Reactjs/node_modules/postcss/lib/postcss.js"}],"generated":{"js":"\"use strict\";\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } it = o[Symbol.iterator](); return it.next.bind(it); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar list = require('postcss').list;\n\nmodule.exports = {\n  /**\n     * Throw special error, to tell beniary,\n     * that this error is from Autoprefixer.\n     */\n  error: function error(text) {\n    var err = new Error(text);\n    err.autoprefixer = true;\n    throw err;\n  },\n\n  /**\n     * Return array, that doesnâ€™t contain duplicates.\n     */\n  uniq: function uniq(array) {\n    var filtered = [];\n\n    for (var _iterator = _createForOfIteratorHelperLoose(array), _step; !(_step = _iterator()).done;) {\n      var i = _step.value;\n\n      if (!filtered.includes(i)) {\n        filtered.push(i);\n      }\n    }\n\n    return filtered;\n  },\n\n  /**\n     * Return \"-webkit-\" on \"-webkit- old\"\n     */\n  removeNote: function removeNote(string) {\n    if (!string.includes(' ')) {\n      return string;\n    }\n\n    return string.split(' ')[0];\n  },\n\n  /**\n     * Escape RegExp symbols\n     */\n  escapeRegexp: function escapeRegexp(string) {\n    return string.replace(/[$()*+-.?[\\\\\\]^{|}]/g, '\\\\$&');\n  },\n\n  /**\n     * Return regexp to check, that CSS string contain word\n     */\n  regexp: function regexp(word, escape) {\n    if (escape === void 0) {\n      escape = true;\n    }\n\n    if (escape) {\n      word = this.escapeRegexp(word);\n    }\n\n    return new RegExp(\"(^|[\\\\s,(])(\" + word + \"($|[\\\\s(,]))\", 'gi');\n  },\n\n  /**\n     * Change comma list\n     */\n  editList: function editList(value, callback) {\n    var origin = list.comma(value);\n    var changed = callback(origin, []);\n\n    if (origin === changed) {\n      return value;\n    }\n\n    var join = value.match(/,\\s*/);\n    join = join ? join[0] : ', ';\n    return changed.join(join);\n  },\n\n  /**\n     * Split the selector into parts.\n     * It returns 3 level deep array because selectors can be comma\n     * separated (1), space separated (2), and combined (3)\n     * @param {String} selector selector string\n     * @return {Array<Array<Array>>} 3 level deep array of split selector\n     * @see utils.test.js for examples\n     */\n  splitSelector: function splitSelector(selector) {\n    return list.comma(selector).map(function (i) {\n      return list.space(i).map(function (k) {\n        return k.split(/(?=\\.|#)/g);\n      });\n    });\n  }\n};"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/autoprefixer/lib/utils.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/autoprefixer/lib/utils.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/autoprefixer/lib/utils.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/autoprefixer/lib/utils.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/autoprefixer/lib/utils.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/autoprefixer/lib/utils.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/autoprefixer/lib/utils.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/autoprefixer/lib/utils.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/autoprefixer/lib/utils.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/autoprefixer/lib/utils.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/autoprefixer/lib/utils.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/autoprefixer/lib/utils.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/autoprefixer/lib/utils.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/autoprefixer/lib/utils.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/autoprefixer/lib/utils.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/autoprefixer/lib/utils.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/autoprefixer/lib/utils.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/autoprefixer/lib/utils.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/autoprefixer/lib/utils.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/autoprefixer/lib/utils.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/autoprefixer/lib/utils.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/autoprefixer/lib/utils.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/autoprefixer/lib/utils.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/autoprefixer/lib/utils.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/autoprefixer/lib/utils.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/autoprefixer/lib/utils.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/autoprefixer/lib/utils.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/autoprefixer/lib/utils.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/autoprefixer/lib/utils.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/autoprefixer/lib/utils.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/autoprefixer/lib/utils.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/autoprefixer/lib/utils.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/autoprefixer/lib/utils.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/autoprefixer/lib/utils.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/autoprefixer/lib/utils.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/autoprefixer/lib/utils.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/autoprefixer/lib/utils.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/autoprefixer/lib/utils.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/autoprefixer/lib/utils.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/autoprefixer/lib/utils.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/autoprefixer/lib/utils.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/autoprefixer/lib/utils.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/autoprefixer/lib/utils.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/autoprefixer/lib/utils.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/autoprefixer/lib/utils.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/autoprefixer/lib/utils.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/autoprefixer/lib/utils.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/autoprefixer/lib/utils.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/autoprefixer/lib/utils.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/autoprefixer/lib/utils.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/autoprefixer/lib/utils.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/autoprefixer/lib/utils.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/autoprefixer/lib/utils.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/autoprefixer/lib/utils.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/autoprefixer/lib/utils.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/autoprefixer/lib/utils.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/autoprefixer/lib/utils.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/autoprefixer/lib/utils.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/autoprefixer/lib/utils.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/autoprefixer/lib/utils.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/autoprefixer/lib/utils.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/autoprefixer/lib/utils.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/autoprefixer/lib/utils.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/autoprefixer/lib/utils.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/autoprefixer/lib/utils.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/autoprefixer/lib/utils.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/autoprefixer/lib/utils.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/autoprefixer/lib/utils.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/autoprefixer/lib/utils.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/autoprefixer/lib/utils.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/autoprefixer/lib/utils.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/autoprefixer/lib/utils.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/autoprefixer/lib/utils.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/autoprefixer/lib/utils.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/autoprefixer/lib/utils.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/autoprefixer/lib/utils.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/autoprefixer/lib/utils.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/autoprefixer/lib/utils.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/autoprefixer/lib/utils.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/autoprefixer/lib/utils.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/autoprefixer/lib/utils.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/autoprefixer/lib/utils.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/autoprefixer/lib/utils.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/autoprefixer/lib/utils.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/autoprefixer/lib/utils.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/autoprefixer/lib/utils.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/autoprefixer/lib/utils.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/autoprefixer/lib/utils.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/autoprefixer/lib/utils.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/autoprefixer/lib/utils.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/autoprefixer/lib/utils.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/autoprefixer/lib/utils.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/autoprefixer/lib/utils.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/autoprefixer/lib/utils.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/autoprefixer/lib/utils.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/autoprefixer/lib/utils.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/autoprefixer/lib/utils.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/autoprefixer/lib/utils.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/autoprefixer/lib/utils.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/autoprefixer/lib/utils.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/autoprefixer/lib/utils.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/autoprefixer/lib/utils.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/autoprefixer/lib/utils.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}}],"sources":{"node_modules/autoprefixer/lib/utils.js":"\"use strict\";\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } it = o[Symbol.iterator](); return it.next.bind(it); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar list = require('postcss').list;\n\nmodule.exports = {\n  /**\n     * Throw special error, to tell beniary,\n     * that this error is from Autoprefixer.\n     */\n  error: function error(text) {\n    var err = new Error(text);\n    err.autoprefixer = true;\n    throw err;\n  },\n\n  /**\n     * Return array, that doesnâ€™t contain duplicates.\n     */\n  uniq: function uniq(array) {\n    var filtered = [];\n\n    for (var _iterator = _createForOfIteratorHelperLoose(array), _step; !(_step = _iterator()).done;) {\n      var i = _step.value;\n\n      if (!filtered.includes(i)) {\n        filtered.push(i);\n      }\n    }\n\n    return filtered;\n  },\n\n  /**\n     * Return \"-webkit-\" on \"-webkit- old\"\n     */\n  removeNote: function removeNote(string) {\n    if (!string.includes(' ')) {\n      return string;\n    }\n\n    return string.split(' ')[0];\n  },\n\n  /**\n     * Escape RegExp symbols\n     */\n  escapeRegexp: function escapeRegexp(string) {\n    return string.replace(/[$()*+-.?[\\\\\\]^{|}]/g, '\\\\$&');\n  },\n\n  /**\n     * Return regexp to check, that CSS string contain word\n     */\n  regexp: function regexp(word, escape) {\n    if (escape === void 0) {\n      escape = true;\n    }\n\n    if (escape) {\n      word = this.escapeRegexp(word);\n    }\n\n    return new RegExp(\"(^|[\\\\s,(])(\" + word + \"($|[\\\\s(,]))\", 'gi');\n  },\n\n  /**\n     * Change comma list\n     */\n  editList: function editList(value, callback) {\n    var origin = list.comma(value);\n    var changed = callback(origin, []);\n\n    if (origin === changed) {\n      return value;\n    }\n\n    var join = value.match(/,\\s*/);\n    join = join ? join[0] : ', ';\n    return changed.join(join);\n  },\n\n  /**\n     * Split the selector into parts.\n     * It returns 3 level deep array because selectors can be comma\n     * separated (1), space separated (2), and combined (3)\n     * @param {String} selector selector string\n     * @return {Array<Array<Array>>} 3 level deep array of split selector\n     * @see utils.test.js for examples\n     */\n  splitSelector: function splitSelector(selector) {\n    return list.comma(selector).map(function (i) {\n      return list.space(i).map(function (k) {\n        return k.split(/(?=\\.|#)/g);\n      });\n    });\n  }\n};"},"lineCount":103}},"error":null,"hash":"cac4547d4c818da4c507635dcdf7e8e5","cacheData":{"env":{}}}