{"id":"node_modules/autoprefixer/lib/prefixer.js","dependencies":[{"name":"/home/omkar/Desktop/Material/Reactjs_Projects/Crud_Reactjs/package.json","includedInParent":true,"mtime":1700575589017},{"name":"/home/omkar/Desktop/Material/Reactjs_Projects/Crud_Reactjs/.babelrc","includedInParent":true,"mtime":1699718964356},{"name":"/home/omkar/Desktop/Material/Reactjs_Projects/Crud_Reactjs/node_modules/autoprefixer/package.json","includedInParent":true,"mtime":1699760093511},{"name":"postcss","loc":{"line":9,"column":21,"index":1245},"parent":"/home/omkar/Desktop/Material/Reactjs_Projects/Crud_Reactjs/node_modules/autoprefixer/lib/prefixer.js","resolved":"/home/omkar/Desktop/Material/Reactjs_Projects/Crud_Reactjs/node_modules/postcss/lib/postcss.js"},{"name":"./browsers","loc":{"line":11,"column":23,"index":1288},"parent":"/home/omkar/Desktop/Material/Reactjs_Projects/Crud_Reactjs/node_modules/autoprefixer/lib/prefixer.js","resolved":"/home/omkar/Desktop/Material/Reactjs_Projects/Crud_Reactjs/node_modules/autoprefixer/lib/browsers.js"},{"name":"./utils","loc":{"line":13,"column":20,"index":1324},"parent":"/home/omkar/Desktop/Material/Reactjs_Projects/Crud_Reactjs/node_modules/autoprefixer/lib/prefixer.js","resolved":"/home/omkar/Desktop/Material/Reactjs_Projects/Crud_Reactjs/node_modules/autoprefixer/lib/utils.js"}],"generated":{"js":"\"use strict\";\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } it = o[Symbol.iterator](); return it.next.bind(it); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar vendor = require('postcss').vendor;\n\nvar Browsers = require('./browsers');\n\nvar utils = require('./utils');\n/**\n * Recursively clone objects\n */\n\n\nfunction _clone(obj, parent) {\n  var cloned = new obj.constructor();\n\n  for (var _i = 0, _Object$keys = Object.keys(obj || {}); _i < _Object$keys.length; _i++) {\n    var i = _Object$keys[_i];\n    var value = obj[i];\n\n    if (i === 'parent' && typeof value === 'object') {\n      if (parent) {\n        cloned[i] = parent;\n      }\n    } else if (i === 'source' || i === null) {\n      cloned[i] = value;\n    } else if (Array.isArray(value)) {\n      cloned[i] = value.map(function (x) {\n        return _clone(x, cloned);\n      });\n    } else if (i !== '_autoprefixerPrefix' && i !== '_autoprefixerValues') {\n      if (typeof value === 'object' && value !== null) {\n        value = _clone(value, cloned);\n      }\n\n      cloned[i] = value;\n    }\n  }\n\n  return cloned;\n}\n\nvar Prefixer = /*#__PURE__*/function () {\n  /**\n     * Add hack to selected names\n     */\n  Prefixer.hack = function hack(klass) {\n    var _this = this;\n\n    if (!this.hacks) {\n      this.hacks = {};\n    }\n\n    return klass.names.map(function (name) {\n      _this.hacks[name] = klass;\n      return _this.hacks[name];\n    });\n  }\n  /**\n     * Load hacks for some names\n     */\n  ;\n\n  Prefixer.load = function load(name, prefixes, all) {\n    var Klass = this.hacks && this.hacks[name];\n\n    if (Klass) {\n      return new Klass(name, prefixes, all);\n    } else {\n      return new this(name, prefixes, all);\n    }\n  }\n  /**\n     * Clone node and clean autprefixer custom caches\n     */\n  ;\n\n  Prefixer.clone = function clone(node, overrides) {\n    var cloned = _clone(node);\n\n    for (var name in overrides) {\n      cloned[name] = overrides[name];\n    }\n\n    return cloned;\n  };\n\n  function Prefixer(name, prefixes, all) {\n    this.prefixes = prefixes;\n    this.name = name;\n    this.all = all;\n  }\n  /**\n     * Find prefix in node parents\n     */\n\n\n  var _proto = Prefixer.prototype;\n\n  _proto.parentPrefix = function parentPrefix(node) {\n    var prefix;\n\n    if (typeof node._autoprefixerPrefix !== 'undefined') {\n      prefix = node._autoprefixerPrefix;\n    } else if (node.type === 'decl' && node.prop[0] === '-') {\n      prefix = vendor.prefix(node.prop);\n    } else if (node.type === 'root') {\n      prefix = false;\n    } else if (node.type === 'rule' && node.selector.includes(':-') && /:(-\\w+-)/.test(node.selector)) {\n      prefix = node.selector.match(/:(-\\w+-)/)[1];\n    } else if (node.type === 'atrule' && node.name[0] === '-') {\n      prefix = vendor.prefix(node.name);\n    } else {\n      prefix = this.parentPrefix(node.parent);\n    }\n\n    if (!Browsers.prefixes().includes(prefix)) {\n      prefix = false;\n    }\n\n    node._autoprefixerPrefix = prefix;\n    return node._autoprefixerPrefix;\n  }\n  /**\n     * Clone node with prefixes\n     */\n  ;\n\n  _proto.process = function process(node, result) {\n    if (!this.check(node)) {\n      return undefined;\n    }\n\n    var parent = this.parentPrefix(node);\n    var prefixes = this.prefixes.filter(function (prefix) {\n      return !parent || parent === utils.removeNote(prefix);\n    });\n    var added = [];\n\n    for (var _iterator = _createForOfIteratorHelperLoose(prefixes), _step; !(_step = _iterator()).done;) {\n      var prefix = _step.value;\n\n      if (this.add(node, prefix, added.concat([prefix]), result)) {\n        added.push(prefix);\n      }\n    }\n\n    return added;\n  }\n  /**\n     * Shortcut for Prefixer.clone\n     */\n  ;\n\n  _proto.clone = function clone(node, overrides) {\n    return Prefixer.clone(node, overrides);\n  };\n\n  return Prefixer;\n}();\n\nmodule.exports = Prefixer;"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/autoprefixer/lib/prefixer.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/autoprefixer/lib/prefixer.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/autoprefixer/lib/prefixer.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/autoprefixer/lib/prefixer.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/autoprefixer/lib/prefixer.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/autoprefixer/lib/prefixer.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/autoprefixer/lib/prefixer.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/autoprefixer/lib/prefixer.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/autoprefixer/lib/prefixer.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/autoprefixer/lib/prefixer.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/autoprefixer/lib/prefixer.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/autoprefixer/lib/prefixer.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/autoprefixer/lib/prefixer.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/autoprefixer/lib/prefixer.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/autoprefixer/lib/prefixer.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/autoprefixer/lib/prefixer.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/autoprefixer/lib/prefixer.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/autoprefixer/lib/prefixer.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/autoprefixer/lib/prefixer.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/autoprefixer/lib/prefixer.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/autoprefixer/lib/prefixer.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/autoprefixer/lib/prefixer.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/autoprefixer/lib/prefixer.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/autoprefixer/lib/prefixer.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/autoprefixer/lib/prefixer.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/autoprefixer/lib/prefixer.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/autoprefixer/lib/prefixer.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/autoprefixer/lib/prefixer.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/autoprefixer/lib/prefixer.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/autoprefixer/lib/prefixer.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/autoprefixer/lib/prefixer.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/autoprefixer/lib/prefixer.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/autoprefixer/lib/prefixer.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/autoprefixer/lib/prefixer.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/autoprefixer/lib/prefixer.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/autoprefixer/lib/prefixer.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/autoprefixer/lib/prefixer.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/autoprefixer/lib/prefixer.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/autoprefixer/lib/prefixer.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/autoprefixer/lib/prefixer.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/autoprefixer/lib/prefixer.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/autoprefixer/lib/prefixer.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/autoprefixer/lib/prefixer.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/autoprefixer/lib/prefixer.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/autoprefixer/lib/prefixer.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/autoprefixer/lib/prefixer.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/autoprefixer/lib/prefixer.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/autoprefixer/lib/prefixer.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/autoprefixer/lib/prefixer.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/autoprefixer/lib/prefixer.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/autoprefixer/lib/prefixer.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/autoprefixer/lib/prefixer.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/autoprefixer/lib/prefixer.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/autoprefixer/lib/prefixer.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/autoprefixer/lib/prefixer.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/autoprefixer/lib/prefixer.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/autoprefixer/lib/prefixer.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/autoprefixer/lib/prefixer.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/autoprefixer/lib/prefixer.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/autoprefixer/lib/prefixer.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/autoprefixer/lib/prefixer.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/autoprefixer/lib/prefixer.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/autoprefixer/lib/prefixer.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/autoprefixer/lib/prefixer.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/autoprefixer/lib/prefixer.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/autoprefixer/lib/prefixer.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/autoprefixer/lib/prefixer.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/autoprefixer/lib/prefixer.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/autoprefixer/lib/prefixer.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/autoprefixer/lib/prefixer.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/autoprefixer/lib/prefixer.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/autoprefixer/lib/prefixer.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/autoprefixer/lib/prefixer.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/autoprefixer/lib/prefixer.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/autoprefixer/lib/prefixer.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/autoprefixer/lib/prefixer.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/autoprefixer/lib/prefixer.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/autoprefixer/lib/prefixer.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/autoprefixer/lib/prefixer.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/autoprefixer/lib/prefixer.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/autoprefixer/lib/prefixer.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/autoprefixer/lib/prefixer.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/autoprefixer/lib/prefixer.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/autoprefixer/lib/prefixer.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/autoprefixer/lib/prefixer.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/autoprefixer/lib/prefixer.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/autoprefixer/lib/prefixer.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/autoprefixer/lib/prefixer.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/autoprefixer/lib/prefixer.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/autoprefixer/lib/prefixer.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/autoprefixer/lib/prefixer.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/autoprefixer/lib/prefixer.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/autoprefixer/lib/prefixer.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/autoprefixer/lib/prefixer.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/autoprefixer/lib/prefixer.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/autoprefixer/lib/prefixer.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/autoprefixer/lib/prefixer.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/autoprefixer/lib/prefixer.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/autoprefixer/lib/prefixer.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/autoprefixer/lib/prefixer.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/autoprefixer/lib/prefixer.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/autoprefixer/lib/prefixer.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/autoprefixer/lib/prefixer.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/autoprefixer/lib/prefixer.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/autoprefixer/lib/prefixer.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/autoprefixer/lib/prefixer.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/autoprefixer/lib/prefixer.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/autoprefixer/lib/prefixer.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/autoprefixer/lib/prefixer.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/autoprefixer/lib/prefixer.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/autoprefixer/lib/prefixer.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/autoprefixer/lib/prefixer.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/autoprefixer/lib/prefixer.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/autoprefixer/lib/prefixer.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/autoprefixer/lib/prefixer.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/autoprefixer/lib/prefixer.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/autoprefixer/lib/prefixer.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/autoprefixer/lib/prefixer.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/autoprefixer/lib/prefixer.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/autoprefixer/lib/prefixer.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/autoprefixer/lib/prefixer.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/autoprefixer/lib/prefixer.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/autoprefixer/lib/prefixer.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/autoprefixer/lib/prefixer.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/autoprefixer/lib/prefixer.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/autoprefixer/lib/prefixer.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/autoprefixer/lib/prefixer.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/autoprefixer/lib/prefixer.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/autoprefixer/lib/prefixer.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/autoprefixer/lib/prefixer.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/autoprefixer/lib/prefixer.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/autoprefixer/lib/prefixer.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/autoprefixer/lib/prefixer.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/autoprefixer/lib/prefixer.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/autoprefixer/lib/prefixer.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/autoprefixer/lib/prefixer.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/autoprefixer/lib/prefixer.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/autoprefixer/lib/prefixer.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/autoprefixer/lib/prefixer.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/autoprefixer/lib/prefixer.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/autoprefixer/lib/prefixer.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/autoprefixer/lib/prefixer.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/autoprefixer/lib/prefixer.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules/autoprefixer/lib/prefixer.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules/autoprefixer/lib/prefixer.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules/autoprefixer/lib/prefixer.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules/autoprefixer/lib/prefixer.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"node_modules/autoprefixer/lib/prefixer.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"node_modules/autoprefixer/lib/prefixer.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"node_modules/autoprefixer/lib/prefixer.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"node_modules/autoprefixer/lib/prefixer.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"node_modules/autoprefixer/lib/prefixer.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"node_modules/autoprefixer/lib/prefixer.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"node_modules/autoprefixer/lib/prefixer.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"node_modules/autoprefixer/lib/prefixer.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"node_modules/autoprefixer/lib/prefixer.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"node_modules/autoprefixer/lib/prefixer.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"node_modules/autoprefixer/lib/prefixer.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"node_modules/autoprefixer/lib/prefixer.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"node_modules/autoprefixer/lib/prefixer.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"node_modules/autoprefixer/lib/prefixer.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"node_modules/autoprefixer/lib/prefixer.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"node_modules/autoprefixer/lib/prefixer.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"node_modules/autoprefixer/lib/prefixer.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"node_modules/autoprefixer/lib/prefixer.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"node_modules/autoprefixer/lib/prefixer.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"node_modules/autoprefixer/lib/prefixer.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}}],"sources":{"node_modules/autoprefixer/lib/prefixer.js":"\"use strict\";\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } it = o[Symbol.iterator](); return it.next.bind(it); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar vendor = require('postcss').vendor;\n\nvar Browsers = require('./browsers');\n\nvar utils = require('./utils');\n/**\n * Recursively clone objects\n */\n\n\nfunction _clone(obj, parent) {\n  var cloned = new obj.constructor();\n\n  for (var _i = 0, _Object$keys = Object.keys(obj || {}); _i < _Object$keys.length; _i++) {\n    var i = _Object$keys[_i];\n    var value = obj[i];\n\n    if (i === 'parent' && typeof value === 'object') {\n      if (parent) {\n        cloned[i] = parent;\n      }\n    } else if (i === 'source' || i === null) {\n      cloned[i] = value;\n    } else if (Array.isArray(value)) {\n      cloned[i] = value.map(function (x) {\n        return _clone(x, cloned);\n      });\n    } else if (i !== '_autoprefixerPrefix' && i !== '_autoprefixerValues') {\n      if (typeof value === 'object' && value !== null) {\n        value = _clone(value, cloned);\n      }\n\n      cloned[i] = value;\n    }\n  }\n\n  return cloned;\n}\n\nvar Prefixer = /*#__PURE__*/function () {\n  /**\n     * Add hack to selected names\n     */\n  Prefixer.hack = function hack(klass) {\n    var _this = this;\n\n    if (!this.hacks) {\n      this.hacks = {};\n    }\n\n    return klass.names.map(function (name) {\n      _this.hacks[name] = klass;\n      return _this.hacks[name];\n    });\n  }\n  /**\n     * Load hacks for some names\n     */\n  ;\n\n  Prefixer.load = function load(name, prefixes, all) {\n    var Klass = this.hacks && this.hacks[name];\n\n    if (Klass) {\n      return new Klass(name, prefixes, all);\n    } else {\n      return new this(name, prefixes, all);\n    }\n  }\n  /**\n     * Clone node and clean autprefixer custom caches\n     */\n  ;\n\n  Prefixer.clone = function clone(node, overrides) {\n    var cloned = _clone(node);\n\n    for (var name in overrides) {\n      cloned[name] = overrides[name];\n    }\n\n    return cloned;\n  };\n\n  function Prefixer(name, prefixes, all) {\n    this.prefixes = prefixes;\n    this.name = name;\n    this.all = all;\n  }\n  /**\n     * Find prefix in node parents\n     */\n\n\n  var _proto = Prefixer.prototype;\n\n  _proto.parentPrefix = function parentPrefix(node) {\n    var prefix;\n\n    if (typeof node._autoprefixerPrefix !== 'undefined') {\n      prefix = node._autoprefixerPrefix;\n    } else if (node.type === 'decl' && node.prop[0] === '-') {\n      prefix = vendor.prefix(node.prop);\n    } else if (node.type === 'root') {\n      prefix = false;\n    } else if (node.type === 'rule' && node.selector.includes(':-') && /:(-\\w+-)/.test(node.selector)) {\n      prefix = node.selector.match(/:(-\\w+-)/)[1];\n    } else if (node.type === 'atrule' && node.name[0] === '-') {\n      prefix = vendor.prefix(node.name);\n    } else {\n      prefix = this.parentPrefix(node.parent);\n    }\n\n    if (!Browsers.prefixes().includes(prefix)) {\n      prefix = false;\n    }\n\n    node._autoprefixerPrefix = prefix;\n    return node._autoprefixerPrefix;\n  }\n  /**\n     * Clone node with prefixes\n     */\n  ;\n\n  _proto.process = function process(node, result) {\n    if (!this.check(node)) {\n      return undefined;\n    }\n\n    var parent = this.parentPrefix(node);\n    var prefixes = this.prefixes.filter(function (prefix) {\n      return !parent || parent === utils.removeNote(prefix);\n    });\n    var added = [];\n\n    for (var _iterator = _createForOfIteratorHelperLoose(prefixes), _step; !(_step = _iterator()).done;) {\n      var prefix = _step.value;\n\n      if (this.add(node, prefix, added.concat([prefix]), result)) {\n        added.push(prefix);\n      }\n    }\n\n    return added;\n  }\n  /**\n     * Shortcut for Prefixer.clone\n     */\n  ;\n\n  _proto.clone = function clone(node, overrides) {\n    return Prefixer.clone(node, overrides);\n  };\n\n  return Prefixer;\n}();\n\nmodule.exports = Prefixer;"},"lineCount":167}},"error":null,"hash":"47acff9da6d3f0b9d00613b46a81e35e","cacheData":{"env":{}}}