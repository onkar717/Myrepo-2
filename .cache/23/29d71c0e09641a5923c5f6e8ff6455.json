{"id":"node_modules/autoprefixer/lib/resolution.js","dependencies":[{"name":"/home/omkar/Desktop/Material/Reactjs_Projects/Crud_Reactjs/package.json","includedInParent":true,"mtime":1700575589017},{"name":"/home/omkar/Desktop/Material/Reactjs_Projects/Crud_Reactjs/.babelrc","includedInParent":true,"mtime":1699718964356},{"name":"/home/omkar/Desktop/Material/Reactjs_Projects/Crud_Reactjs/node_modules/autoprefixer/package.json","includedInParent":true,"mtime":1699760093511},{"name":"num2fraction","loc":{"line":13,"column":18,"index":1751},"parent":"/home/omkar/Desktop/Material/Reactjs_Projects/Crud_Reactjs/node_modules/autoprefixer/lib/resolution.js","resolved":"/home/omkar/Desktop/Material/Reactjs_Projects/Crud_Reactjs/node_modules/num2fraction/index.js"},{"name":"./prefixer","loc":{"line":15,"column":23,"index":1792},"parent":"/home/omkar/Desktop/Material/Reactjs_Projects/Crud_Reactjs/node_modules/autoprefixer/lib/resolution.js","resolved":"/home/omkar/Desktop/Material/Reactjs_Projects/Crud_Reactjs/node_modules/autoprefixer/lib/prefixer.js"},{"name":"./utils","loc":{"line":17,"column":20,"index":1828},"parent":"/home/omkar/Desktop/Material/Reactjs_Projects/Crud_Reactjs/node_modules/autoprefixer/lib/resolution.js","resolved":"/home/omkar/Desktop/Material/Reactjs_Projects/Crud_Reactjs/node_modules/autoprefixer/lib/utils.js"}],"generated":{"js":"\"use strict\";\n\nfunction _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } it = o[Symbol.iterator](); return it.next.bind(it); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _defaults(subClass, superClass); }\n\nvar n2f = require('num2fraction');\n\nvar Prefixer = require('./prefixer');\n\nvar utils = require('./utils');\n\nvar REGEXP = /(min|max)-resolution\\s*:\\s*\\d*\\.?\\d+(dppx|dpi|x)/gi;\nvar SPLIT = /(min|max)-resolution(\\s*:\\s*)(\\d*\\.?\\d+)(dppx|dpi|x)/i;\n\nvar Resolution = /*#__PURE__*/function (_Prefixer) {\n  _inheritsLoose(Resolution, _Prefixer);\n\n  function Resolution() {\n    return _Prefixer.apply(this, arguments) || this;\n  }\n\n  var _proto = Resolution.prototype;\n\n  /**\n     * Return prefixed query name\n     */\n  _proto.prefixName = function prefixName(prefix, name) {\n    if (prefix === '-moz-') {\n      return name + '--moz-device-pixel-ratio';\n    } else {\n      return prefix + name + '-device-pixel-ratio';\n    }\n  }\n  /**\n     * Return prefixed query\n     */\n  ;\n\n  _proto.prefixQuery = function prefixQuery(prefix, name, colon, value, units) {\n    if (units === 'dpi') {\n      value = Number(value / 96);\n    }\n\n    if (prefix === '-o-') {\n      value = n2f(value);\n    }\n\n    return this.prefixName(prefix, name) + colon + value;\n  }\n  /**\n     * Remove prefixed queries\n     */\n  ;\n\n  _proto.clean = function clean(rule) {\n    var _this = this;\n\n    if (!this.bad) {\n      this.bad = [];\n\n      for (var _iterator = _createForOfIteratorHelperLoose(this.prefixes), _step; !(_step = _iterator()).done;) {\n        var prefix = _step.value;\n        this.bad.push(this.prefixName(prefix, 'min'));\n        this.bad.push(this.prefixName(prefix, 'max'));\n      }\n    }\n\n    rule.params = utils.editList(rule.params, function (queries) {\n      return queries.filter(function (query) {\n        return _this.bad.every(function (i) {\n          return !query.includes(i);\n        });\n      });\n    });\n  }\n  /**\n     * Add prefixed queries\n     */\n  ;\n\n  _proto.process = function process(rule) {\n    var _this2 = this;\n\n    var parent = this.parentPrefix(rule);\n    var prefixes = parent ? [parent] : this.prefixes;\n    rule.params = utils.editList(rule.params, function (origin, prefixed) {\n      for (var _iterator2 = _createForOfIteratorHelperLoose(origin), _step2; !(_step2 = _iterator2()).done;) {\n        var query = _step2.value;\n\n        if (!query.includes('min-resolution') && !query.includes('max-resolution')) {\n          prefixed.push(query);\n          continue;\n        }\n\n        var _loop = function _loop() {\n          var prefix = _step3.value;\n          var processed = query.replace(REGEXP, function (str) {\n            var parts = str.match(SPLIT);\n            return _this2.prefixQuery(prefix, parts[1], parts[2], parts[3], parts[4]);\n          });\n          prefixed.push(processed);\n        };\n\n        for (var _iterator3 = _createForOfIteratorHelperLoose(prefixes), _step3; !(_step3 = _iterator3()).done;) {\n          _loop();\n        }\n\n        prefixed.push(query);\n      }\n\n      return utils.uniq(prefixed);\n    });\n  };\n\n  return Resolution;\n}(Prefixer);\n\nmodule.exports = Resolution;"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/autoprefixer/lib/resolution.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/autoprefixer/lib/resolution.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/autoprefixer/lib/resolution.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/autoprefixer/lib/resolution.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/autoprefixer/lib/resolution.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/autoprefixer/lib/resolution.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/autoprefixer/lib/resolution.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/autoprefixer/lib/resolution.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/autoprefixer/lib/resolution.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/autoprefixer/lib/resolution.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/autoprefixer/lib/resolution.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/autoprefixer/lib/resolution.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/autoprefixer/lib/resolution.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/autoprefixer/lib/resolution.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/autoprefixer/lib/resolution.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/autoprefixer/lib/resolution.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/autoprefixer/lib/resolution.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/autoprefixer/lib/resolution.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/autoprefixer/lib/resolution.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/autoprefixer/lib/resolution.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/autoprefixer/lib/resolution.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/autoprefixer/lib/resolution.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/autoprefixer/lib/resolution.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/autoprefixer/lib/resolution.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/autoprefixer/lib/resolution.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/autoprefixer/lib/resolution.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/autoprefixer/lib/resolution.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/autoprefixer/lib/resolution.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/autoprefixer/lib/resolution.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/autoprefixer/lib/resolution.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/autoprefixer/lib/resolution.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/autoprefixer/lib/resolution.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/autoprefixer/lib/resolution.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/autoprefixer/lib/resolution.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/autoprefixer/lib/resolution.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/autoprefixer/lib/resolution.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/autoprefixer/lib/resolution.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/autoprefixer/lib/resolution.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/autoprefixer/lib/resolution.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/autoprefixer/lib/resolution.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/autoprefixer/lib/resolution.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/autoprefixer/lib/resolution.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/autoprefixer/lib/resolution.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/autoprefixer/lib/resolution.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/autoprefixer/lib/resolution.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/autoprefixer/lib/resolution.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/autoprefixer/lib/resolution.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/autoprefixer/lib/resolution.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/autoprefixer/lib/resolution.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/autoprefixer/lib/resolution.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/autoprefixer/lib/resolution.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/autoprefixer/lib/resolution.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/autoprefixer/lib/resolution.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/autoprefixer/lib/resolution.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/autoprefixer/lib/resolution.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/autoprefixer/lib/resolution.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/autoprefixer/lib/resolution.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/autoprefixer/lib/resolution.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/autoprefixer/lib/resolution.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/autoprefixer/lib/resolution.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/autoprefixer/lib/resolution.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/autoprefixer/lib/resolution.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/autoprefixer/lib/resolution.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/autoprefixer/lib/resolution.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/autoprefixer/lib/resolution.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/autoprefixer/lib/resolution.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/autoprefixer/lib/resolution.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/autoprefixer/lib/resolution.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/autoprefixer/lib/resolution.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/autoprefixer/lib/resolution.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/autoprefixer/lib/resolution.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/autoprefixer/lib/resolution.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/autoprefixer/lib/resolution.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/autoprefixer/lib/resolution.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/autoprefixer/lib/resolution.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/autoprefixer/lib/resolution.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/autoprefixer/lib/resolution.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/autoprefixer/lib/resolution.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/autoprefixer/lib/resolution.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/autoprefixer/lib/resolution.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/autoprefixer/lib/resolution.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/autoprefixer/lib/resolution.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/autoprefixer/lib/resolution.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/autoprefixer/lib/resolution.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/autoprefixer/lib/resolution.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/autoprefixer/lib/resolution.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/autoprefixer/lib/resolution.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/autoprefixer/lib/resolution.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/autoprefixer/lib/resolution.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/autoprefixer/lib/resolution.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/autoprefixer/lib/resolution.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/autoprefixer/lib/resolution.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/autoprefixer/lib/resolution.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/autoprefixer/lib/resolution.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/autoprefixer/lib/resolution.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/autoprefixer/lib/resolution.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/autoprefixer/lib/resolution.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/autoprefixer/lib/resolution.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/autoprefixer/lib/resolution.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/autoprefixer/lib/resolution.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/autoprefixer/lib/resolution.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/autoprefixer/lib/resolution.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/autoprefixer/lib/resolution.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/autoprefixer/lib/resolution.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/autoprefixer/lib/resolution.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/autoprefixer/lib/resolution.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/autoprefixer/lib/resolution.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/autoprefixer/lib/resolution.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/autoprefixer/lib/resolution.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/autoprefixer/lib/resolution.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/autoprefixer/lib/resolution.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/autoprefixer/lib/resolution.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/autoprefixer/lib/resolution.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/autoprefixer/lib/resolution.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/autoprefixer/lib/resolution.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/autoprefixer/lib/resolution.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/autoprefixer/lib/resolution.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/autoprefixer/lib/resolution.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/autoprefixer/lib/resolution.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/autoprefixer/lib/resolution.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/autoprefixer/lib/resolution.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/autoprefixer/lib/resolution.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/autoprefixer/lib/resolution.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/autoprefixer/lib/resolution.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/autoprefixer/lib/resolution.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}}],"sources":{"node_modules/autoprefixer/lib/resolution.js":"\"use strict\";\n\nfunction _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } it = o[Symbol.iterator](); return it.next.bind(it); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _defaults(subClass, superClass); }\n\nvar n2f = require('num2fraction');\n\nvar Prefixer = require('./prefixer');\n\nvar utils = require('./utils');\n\nvar REGEXP = /(min|max)-resolution\\s*:\\s*\\d*\\.?\\d+(dppx|dpi|x)/gi;\nvar SPLIT = /(min|max)-resolution(\\s*:\\s*)(\\d*\\.?\\d+)(dppx|dpi|x)/i;\n\nvar Resolution = /*#__PURE__*/function (_Prefixer) {\n  _inheritsLoose(Resolution, _Prefixer);\n\n  function Resolution() {\n    return _Prefixer.apply(this, arguments) || this;\n  }\n\n  var _proto = Resolution.prototype;\n\n  /**\n     * Return prefixed query name\n     */\n  _proto.prefixName = function prefixName(prefix, name) {\n    if (prefix === '-moz-') {\n      return name + '--moz-device-pixel-ratio';\n    } else {\n      return prefix + name + '-device-pixel-ratio';\n    }\n  }\n  /**\n     * Return prefixed query\n     */\n  ;\n\n  _proto.prefixQuery = function prefixQuery(prefix, name, colon, value, units) {\n    if (units === 'dpi') {\n      value = Number(value / 96);\n    }\n\n    if (prefix === '-o-') {\n      value = n2f(value);\n    }\n\n    return this.prefixName(prefix, name) + colon + value;\n  }\n  /**\n     * Remove prefixed queries\n     */\n  ;\n\n  _proto.clean = function clean(rule) {\n    var _this = this;\n\n    if (!this.bad) {\n      this.bad = [];\n\n      for (var _iterator = _createForOfIteratorHelperLoose(this.prefixes), _step; !(_step = _iterator()).done;) {\n        var prefix = _step.value;\n        this.bad.push(this.prefixName(prefix, 'min'));\n        this.bad.push(this.prefixName(prefix, 'max'));\n      }\n    }\n\n    rule.params = utils.editList(rule.params, function (queries) {\n      return queries.filter(function (query) {\n        return _this.bad.every(function (i) {\n          return !query.includes(i);\n        });\n      });\n    });\n  }\n  /**\n     * Add prefixed queries\n     */\n  ;\n\n  _proto.process = function process(rule) {\n    var _this2 = this;\n\n    var parent = this.parentPrefix(rule);\n    var prefixes = parent ? [parent] : this.prefixes;\n    rule.params = utils.editList(rule.params, function (origin, prefixed) {\n      for (var _iterator2 = _createForOfIteratorHelperLoose(origin), _step2; !(_step2 = _iterator2()).done;) {\n        var query = _step2.value;\n\n        if (!query.includes('min-resolution') && !query.includes('max-resolution')) {\n          prefixed.push(query);\n          continue;\n        }\n\n        var _loop = function _loop() {\n          var prefix = _step3.value;\n          var processed = query.replace(REGEXP, function (str) {\n            var parts = str.match(SPLIT);\n            return _this2.prefixQuery(prefix, parts[1], parts[2], parts[3], parts[4]);\n          });\n          prefixed.push(processed);\n        };\n\n        for (var _iterator3 = _createForOfIteratorHelperLoose(prefixes), _step3; !(_step3 = _iterator3()).done;) {\n          _loop();\n        }\n\n        prefixed.push(query);\n      }\n\n      return utils.uniq(prefixed);\n    });\n  };\n\n  return Resolution;\n}(Prefixer);\n\nmodule.exports = Resolution;"},"lineCount":125}},"error":null,"hash":"51cddc10a2c6f8de8139c2cabe1c8912","cacheData":{"env":{}}}